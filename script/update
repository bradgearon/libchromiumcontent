#!/usr/bin/env python

import errno
import json
import os
import pipes
import shlex
import shutil
import subprocess
import tempfile


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
DEPOT_TOOLS_DIR = os.path.join(VENDOR_DIR, 'depot_tools')
CHROMIUM_DIR = os.path.join(VENDOR_DIR, 'chromium')
SRC_DIR = os.path.join(CHROMIUM_DIR, 'src')
CHROMIUMCONTENT_SOURCE_DIR = os.path.join(SOURCE_ROOT, 'chromiumcontent')
CHROMIUMCONTENT_DESTINATION_DIR = os.path.join(SRC_DIR, 'chromiumcontent')


def main():
    return (write_dot_gclient() or
            gclient_sync() or
            apply_patches() or
            copy_chromiumcontent_files() or
            run_gyp() or
            install_win_tool_wrapper())


def write_dot_gclient():
    template = os.path.join(CHROMIUM_DIR, '.gclient.in')
    destination = os.path.join(CHROMIUM_DIR, '.gclient')
    version = chromium_version()
    with open(template) as t:
        with open(destination, 'w') as d:
            for line in t:
                d.write(line.replace('{{VERSION}}', version))


def chromium_version():
    with open(os.path.join(SOURCE_ROOT, 'VERSION')) as f:
        return f.readline().strip()


def gclient_sync():
    ensure_nacl_disabled()

    # Some gclient hooks assume that depot_tools is on the path.
    os.environ['PATH'] = os.path.pathsep.join([DEPOT_TOOLS_DIR, os.environ['PATH']])

    gclient = os.path.join(DEPOT_TOOLS_DIR, 'gclient.py')
    os.chdir(CHROMIUM_DIR)
    if subprocess.call([sys.executable, gclient, 'sync']) == 0:
      return
    sys.stderr.write('gclient sync failed. Reverting changes and trying again.\n')
    sys.stderr.flush()
    return (subprocess.call([sys.executable, gclient, 'revert']) or
            subprocess.call([sys.executable, gclient, 'sync']))


def ensure_nacl_disabled():
    # Disable NaCl. We don't need it, and it requires some very long filepaths
    # which often overrun the Windows file path limit.
    if 'disable_nacl=1' in os.environ.get('GYP_DEFINES', ''):
        return
    os.environ['GYP_DEFINES'] = ' '.join(['disable_nacl=1', os.environ.get('GYP_DEFINES', '')])


def copy_chromiumcontent_files():
    try:
        os.makedirs(CHROMIUMCONTENT_DESTINATION_DIR)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
    for dirpath, dirnames, filenames in os.walk(CHROMIUMCONTENT_SOURCE_DIR):
        for dirname in dirnames:
            mkdir_p(os.path.join(dirpath, dirname))
        for filename in filenames:
            source = os.path.join(dirpath, filename)
            relative = os.path.relpath(source, start=CHROMIUMCONTENT_SOURCE_DIR)
            destination = os.path.join(CHROMIUMCONTENT_DESTINATION_DIR, relative)
            if is_newer(destination, source):
                continue
            shutil.copy2(source, destination)


def apply_patches():
    # Applying patches can invoke gclient, which in turn can invoke gyp, so make
    # sure we have our gyp environment set.
    ensure_nacl_disabled()

    return subprocess.call([sys.executable, os.path.join(SOURCE_ROOT, 'script', 'apply-patches')])


def run_gyp():
    ensure_nacl_disabled()
    os.environ['GYP_GENERATORS'] = 'ninja'

    if sys.platform == 'darwin':
        # Build 64-bit
        os.environ['GYP_DEFINES'] = ' '.join(['host_arch=x64 target_arch=x64', os.environ.get('GYP_DEFINES', '')])

        # Use Xcode's own clang instead of Chromium's. This matches what embedding
        # applications will use, reducing the risk of bugs due to version
        # mismatches.
        os.environ['CC_target'] = 'clang'
        os.environ['CXX_target'] = 'clang++'

    os.chdir(SOURCE_ROOT)
    REL_SRC_DIR = os.path.relpath(SRC_DIR)
    REL_CHROMIUMCONTENT_DESTINATION_DIR = os.path.relpath(CHROMIUMCONTENT_DESTINATION_DIR)

    python = sys.executable
    if sys.platform in ['win32', 'cygwin']:
      python = chromium_python_path()

    vs2013_runtime_dll_dirs = DownloadVsToolChain()

    # gyp_chromium is executed with win32 python shipped by chromium, so it can
    # not understand POSIX-style paths, to make it work we pass must relative
    # paths to it.
    gyp = os.path.join(REL_SRC_DIR, 'build', 'gyp_chromium')
    result = subprocess.call([python, gyp, '-Ichromiumcontent.gypi',
                              '--depth', REL_SRC_DIR,
                               os.path.join(REL_CHROMIUMCONTENT_DESTINATION_DIR,
                                            'chromiumcontent.gyp')])
    if result:
        return result

    if vs2013_runtime_dll_dirs:
        x64_runtime, x86_runtime = vs2013_runtime_dll_dirs
        CopyVsRuntimeDlls(os.path.join(SRC_DIR, 'out'),
                          (x86_runtime, x64_runtime))


def install_win_tool_wrapper():
    if sys.platform not in ['win32', 'cygwin']:
        return
    for config in ['Debug', 'Release']:
        config_dir = os.path.join(SRC_DIR, 'out', config)
        win_tool = os.path.join(config_dir, 'gyp-win-tool')
        shutil.move(win_tool, '{0}-original'.format(win_tool))
        shutil.copy(os.path.join(SOURCE_ROOT, 'gyp-win-tool-wrapper'), win_tool)


def chromium_python_path():
    """Returns the win32 python shipped by Chromium."""

    return os.path.join(SRC_DIR, 'third_party', 'python_26', 'python.exe')


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise


def is_newer(destination, source):
    return os.path.exists(destination) and \
        os.path.getmtime(destination) > os.path.getmtime(source)


##
## The following code comes from a newer version of gyp_chromium
##


def GetDesiredVsToolchainHashes():
  """Load a list of SHA1s corresponding to the toolchains that we want installed
  to build with."""
  sha1path = os.path.join(SOURCE_ROOT, 'script', 'toolchain_vs2013.hash')
  with open(sha1path, 'rb') as f:
    return f.read().strip().splitlines()


def DownloadVsToolChain():
  """Download the Visual Studio toolchain on Windows.

  If on Windows, request that depot_tools install/update the automatic
  toolchain, and then use it (unless opted-out) and return a tuple containing
  the x64 and x86 paths. Otherwise return None.
  """
  vs2013_runtime_dll_dirs = None
  if sys.platform in ('win32', 'cygwin'):
    temp_handle, data_file = tempfile.mkstemp(suffix='.json')
    os.close(temp_handle)
    get_toolchain_args = [
        sys.executable,
        os.path.join(SOURCE_ROOT,
                    'script',
                    'get_toolchain_if_necessary.py'),
        '--output-json', data_file,
      ] + GetDesiredVsToolchainHashes()
    subprocess.check_call(get_toolchain_args)

    with open(data_file, 'r') as tempf:
      toolchain_data = json.load(tempf)
    os.unlink(data_file)

    toolchain = toolchain_data['path']
    version = toolchain_data['version']
    version_is_pro = version[-1] != 'e'
    win8sdk = toolchain_data['win8sdk']
    wdk = toolchain_data['wdk']
    # TODO(scottmg): The order unfortunately matters in these. They should be
    # split into separate keys for x86 and x64. (See CopyVsRuntimeDlls call
    # below). http://crbug.com/345992
    vs2013_runtime_dll_dirs = toolchain_data['runtime_dirs']

    if not version_is_pro:
      os.environ['GYP_MSVS_OVERRIDE_PATH'] = toolchain
    os.environ['GYP_MSVS_VERSION'] = version
    # We need to make sure windows_sdk_path is set to the automated
    # toolchain values in GYP_DEFINES, but don't want to override any
    # otheroptions.express
    # values there.
    gyp_defines_dict = dict(map(lambda x: x.split('='), shlex.split(os.environ.get('GYP_DEFINES', ''))))
    gyp_defines_dict['windows_sdk_path'] = win8sdk
    os.environ['GYP_DEFINES'] = ' '.join('%s=%s' % (k, pipes.quote(str(v)))
        for k, v in gyp_defines_dict.iteritems())
    os.environ['WINDOWSSDKDIR'] = win8sdk
    os.environ['WDK_DIR'] = wdk
    # Include the VS runtime in the PATH in case it's not machine-installed.
    runtime_path = ';'.join(vs2013_runtime_dll_dirs)
    os.environ['PATH'] = runtime_path + ';' + os.environ['PATH']
    print('Using automatic toolchain in %s (%s edition).' % (
              toolchain, 'Pro' if version_is_pro else 'Express'))
  return vs2013_runtime_dll_dirs


def CopyVsRuntimeDlls(output_dir, runtime_dirs):
  """Copies the VS runtime DLLs from the given |runtime_dirs| to the output
  directory so that even if not system-installed, built binaries are likely to
  be able to run.

  This needs to be run after gyp has been run so that the expected target
  output directories are already created.
  """
  assert sys.platform.startswith(('win32', 'cygwin'))

  def copy_runtime(target_dir, source_dir, dll_pattern):
    """Copy both the msvcr and msvcp runtime DLLs, only if the target doesn't
    exist, but the target directory does exist."""
    for which in ('p', 'r'):
      dll = dll_pattern % which
      target = os.path.join(target_dir, dll)
      source = os.path.join(source_dir, dll)
      # If gyp generated to that output dir, and the runtime isn't already
      # there, then copy it over.
      if (os.path.isdir(target_dir) and
          (not os.path.isfile(target) or
            os.stat(target).st_mtime != os.stat(source).st_mtime)):
        print 'Copying %s to %s...' % (source, target)
        if os.path.exists(target):
          os.unlink(target)
        shutil.copy2(source, target)

  x86, x64 = runtime_dirs
  out_debug = os.path.join(output_dir, 'Debug')
  out_debug_nacl64 = os.path.join(output_dir, 'Debug', 'x64')
  out_release = os.path.join(output_dir, 'Release')
  out_release_nacl64 = os.path.join(output_dir, 'Release', 'x64')
  out_debug_x64 = os.path.join(output_dir, 'Debug_x64')
  out_release_x64 = os.path.join(output_dir, 'Release_x64')
  print(os.path.abspath(x86))

  if os.path.exists(out_debug) and not os.path.exists(out_debug_nacl64):
    os.makedirs(out_debug_nacl64)
  if os.path.exists(out_release) and not os.path.exists(out_release_nacl64):
    os.makedirs(out_release_nacl64)
  copy_runtime(out_debug,          x86, 'msvc%s120d.dll')
  copy_runtime(out_release,        x86, 'msvc%s120.dll')
  copy_runtime(out_debug_x64,      x64, 'msvc%s120d.dll')
  copy_runtime(out_release_x64,    x64, 'msvc%s120.dll')
  copy_runtime(out_debug_nacl64,   x64, 'msvc%s120d.dll')
  copy_runtime(out_release_nacl64, x64, 'msvc%s120.dll')


##
## End copied gyp_chromium code
##


if __name__ == '__main__':
    import sys
    sys.exit(main())
